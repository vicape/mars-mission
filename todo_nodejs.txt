<!-- .env -->
# Variables de entorno para la configuración de la base de datos PostgreSQL
PGUSER=postgres.yayrbsvafizrldmkxtvj
PGHOST=aws-0-us-west-1.pooler.supabase.com
PGDATABASE=postgres
PGPASSWORD=copaamerica2024
PGPORT=5432

# Clave secreta para JWT
JWT_SECRET_KEY=7d6f85a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9

# Variables de entorno para la configuración de Supabase
SUPABASE_URL=https://yayrbsvafizrldmkxtvj.supabase.co
SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlheXJic3ZhZml6cmxkbWt4dHZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTg0MTU0NDUsImV4cCI6MjAzMzk5MTQ0NX0.alW7sPzJLaJA_V9Ou4H7QtVotfpJQY9xqIplpr7gN4Q
 
# Clave API de OpenAI
#REDACTED


<!-- api\ai copy.js -->
const express = require('express');
const router = express.Router(); 

// Cargar la clave API de OpenAI desde las variables de entorno
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

router.post('/chat', async (req, res) => {
    const { prompt } = req.body;
    if (!prompt) {
        return res.status(400).json({ error: 'No prompt provided' });
    }

    const url = 'https://api.openai.com/v1/chat/completions';
    const data = {
        model: "gpt-3.5-turbo",  // Asegúrate de usar un modelo disponible
        messages: [
            { role: 'system', content: 'Eres un asistente especializado en informar y educar sobre viajes y exploración en Marte. Responde solo con información relacionada con Marte.' },
            { role: 'user', content: prompt }
        ]
    };

    try {
        // Importación dinámica de node-fetch para ES Modules
        const fetch = (await import('node-fetch')).default;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            const errorInfo = await response.json();
            throw new Error(`OpenAI API responded with status: ${response.status}, body was: ${JSON.stringify(errorInfo)}`);
        }

        const result = await response.json();
        res.json(result.choices[0].message.content);
    } catch (error) {
        console.error('Error interacting with OpenAI API:', error);
        res.status(500).json({ error: error.message || 'Error processing request' });
    }
});

module.exports = router;


<!-- api\ai.js -->
import OpenAI from 'openai';

// Inicializa OpenAI con tu API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST requests are allowed' });
  }

  const { prompt } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: 'No prompt provided' });
  }

  try {
    // Crea un nuevo hilo y envía el mensaje
    const thread = await openai.threads.create({
      messages: [
        { role: 'user', content: prompt }
      ]
    });

    // Ejecuta el hilo usando el ID del asistente
    const run = await openai.threads.runs.create({
      thread_id: thread.id,
      assistant_id: 'asst_WaBmHVv5hqSTelXf1azvBbJh'
    });

    // Espera hasta que el run esté completo
    let runStatus = await openai.threads.runs.retrieve({
      thread_id: thread.id,
      run_id: run.id
    });

    while (runStatus.status !== 'completed') {
      await new Promise(res => setTimeout(res, 1000));
      runStatus = await openai.threads.runs.retrieve({
        thread_id: thread.id,
        run_id: run.id
      });
    }

    // Obtener la lista de mensajes del hilo
    const messages = await openai.threads.messages.list({
      thread_id: thread.id
    });

    // Extraer el contenido del mensaje de respuesta
    const assistantMessage = messages.data.find(message => message.role === 'assistant').content[0].text.value;

    res.status(200).json({ message: assistantMessage });
  } catch (error) {
    console.error('Error interacting with OpenAI API:', error);
    res.status(500).json({ error: error.message || 'Error processing request' });
  }
}


<!-- api\db.js -->
// Importa el módulo 'pg' para interactuar con PostgreSQL.
const { Pool } = require('pg');

// Configuración de la conexión a la base de datos PostgreSQL usando variables de entorno.
const pool = new Pool({
  user: process.env.DB_USER,      // Usuario de la base de datos
  host: process.env.DB_HOST,      // Host de la base de datos
  database: process.env.DB_NAME,  // Nombre de la base de datos
  password: process.env.DB_PASS,  // Contraseña de la base de datos
  port: process.env.DB_PORT,      // Puerto de la base de datos
});

// Exporta el pool de conexiones para que pueda ser usado en otros archivos.
module.exports = pool;


<!-- api\index.js -->
// api/index.js
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const axios = require('axios');
const logLoginAttempt = require('./log');
const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const missionRoutes = require('./mission');  // Rutas para las misiones
const aiRoutes = require('./ai');  // Añadido para incluir las rutas de OpenAI

require('dotenv').config();

const app = express();
app.use(bodyParser.json());
app.use(cors());
app.use(cookieParser());

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const secretKey = process.env.JWT_SECRET_KEY; // Asegúrate de tener esta variable en tu archivo .env

if (!secretKey) {
  console.error('JWT_SECRET_KEY is not defined in the environment variables');
  process.exit(1); // Detiene la aplicación si no se encuentra la clave secreta
}

app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  let country = 'EMPTY';

  try {
    const response = await axios.get(`http://ip-api.com/json/${ip}`);
    country = response.data.country || 'EMPTY';
  } catch (error) {
    console.error('Error fetching country:', error.message);
  }

  try {
    const { data, error } = await supabase
      .from('usuarios')
      .select('id, team, school')
      .eq('usuario', username)
      .eq('pass', password)
      .single();

    if (error) {
      console.error('Error fetching user from database:', error.message);
      await logLoginAttempt(username, password, ip, req.headers['user-agent'], 'Failed', country);
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    if (!data) {
      console.log('User not found or invalid credentials');
      await logLoginAttempt(username, password, ip, req.headers['user-agent'], 'Failed', country);
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    await logLoginAttempt(username, password, ip, req.headers['user-agent'], 'Success', country);

    const token = jwt.sign({ username, team: data.team, school: data.school }, secretKey, { expiresIn: '1h' });
    res.cookie('token', token, { httpOnly: true, secure: true });
    res.json({
      message: 'Login successful',
      user: {
        username,
        team: data.team,
        school: data.school
      }
    });
  } catch (error) {
    console.error('Error during login:', error.message);
    res.status(500).json({ message: 'Internal server error' });
  }
});

const authMiddleware = (req, res, next) => {
  const token = req.cookies.token;
  if (!token) return res.status(401).json({ message: 'Unauthorized' });

  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) return res.status(401).json({ message: 'Unauthorized' });
    req.user = decoded;
    next();
  });
};

// Añadir nuevas rutas
app.use('/api/mission', missionRoutes);
app.use('/api/ai', aiRoutes);  // Usar las rutas de AI

app.get('/api/secure-data', authMiddleware, (req, res) => {
  res.json({ message: 'This is secure data', user: req.user });
});

app.get('/api/verify-token', authMiddleware, (req, res) => {
  res.json({ message: 'Authenticated', user: req.user });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


<!-- api\log.js -->
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function logLoginAttempt(username, password, ip, browser, status, country) {
  const time = new Date().toISOString();  // Obtener la fecha y hora actuales en formato ISO

  try {
    const { data, error } = await supabase
      .from('log')
      .insert([{ username, pass: password, time, ip, browser, status, country }]);

    if (error) {
      throw error;
    }

    console.log('Log inserted successfully:', data);
  } catch (error) {
    console.error('Error logging login attempt:', error.message);
  }
}

module.exports = logLoginAttempt;


<!-- api\mission.js -->
// api/mission.js
const express = require('express');
const pool = require('./db');

const router = express.Router();

router.get('/fecha-inicio', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT EXTRACT(EPOCH FROM (NOW() - fecha_inicio)) AS diff_seconds
      FROM mission
      WHERE id = $1
    `, [1]); // Asumiendo que quieres el registro con id = 1

    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Mission not found' });
    }

    const diffSeconds = result.rows[0].diff_seconds;
    const absDiffSeconds = Math.abs(diffSeconds);

    const days = Math.floor(absDiffSeconds / (24 * 3600));
    const hours = Math.floor((absDiffSeconds % (24 * 3600)) / 3600);
    const minutes = Math.floor((absDiffSeconds % 3600) / 60);
    const seconds = Math.floor(absDiffSeconds % 60);

    const sign = diffSeconds < 0 ? '-' : '+';

    res.json({ 
      mission_clock: `${sign}${days} : ${hours.toString().padStart(2, '0')} : ${minutes.toString().padStart(2, '0')} : ${seconds.toString().padStart(2, '0')}`
    });
  } catch (error) {
    console.error('Error fetching fecha_inicio:', error.message);
    res.status(500).json({ message: 'Internal server error' });
  }
});

module.exports = router;


<!-- api\testSupabaseConnection.js -->
// Importa el módulo 'createClient' de '@supabase/supabase-js' para interactuar con Supabase.
const { createClient } = require('@supabase/supabase-js');

// URL y clave pública del proyecto Supabase.
const supabaseUrl = 'https://yayrbsvafizrldmkxtvj.supabase.co';
const supabaseKey = 'tu_clave_publica_aqui';
const supabase = createClient(supabaseUrl, supabaseKey);

// Función para probar la conexión a Supabase insertando un registro en la tabla 'log'.
const testSupabaseConnection = async () => {
  const { data, error } = await supabase
    .from('log')
    .insert([{ username: 'test_user', pass: 'test_password', time: new Date().toISOString(), ip: '127.0.0.1' }]);

  if (error) {
    console.error('Error inserting data:', error);
  } else {
    console.log('Data inserted successfully:', data);
  }
};

// Ejecuta la función para probar la conexión.
testSupabaseConnection();


<!-- apuntes.js -->
const fs = require('fs');
const path = require('path');

// Directorio raíz del proyecto
const rootDir = __dirname;
// Archivo de salida
const outputFile = path.join(rootDir, 'todo_nodejs.txt');

// Extensiones de archivos de imagen a excluir
const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.svg', '.webp', '.ico'];

// Archivos específicos a excluir
const specificFilesToExclude = ['todo_automatico.txt', 'todo.txt', 'package-lock.json'];

// Directorios a excluir
const directoriesToExclude = ['node_modules', '.git'];

// Eliminar el archivo de salida si existe
if (fs.existsSync(outputFile)) {
    fs.unlinkSync(outputFile);
}

// Lee el archivo .gitignore y construye una lista de patrones a ignorar
const readGitignore = () => {
    const ignoreFilePath = path.join(rootDir, '.gitignore');
    if (!fs.existsSync(ignoreFilePath)) {
        return [];
    }

    const ignorePatterns = fs.readFileSync(ignoreFilePath, 'utf-8')
        .split('\n')
        .map(pattern => pattern.trim())
        .filter(pattern => pattern && !pattern.startsWith('#'));

    // Añadir node_modules y .git a las exclusiones si no están en .gitignore
    if (!ignorePatterns.includes('node_modules')) {
        ignorePatterns.push('node_modules');
    }
    if (!ignorePatterns.includes('.git')) {
        ignorePatterns.push('.git');
    }

    return ignorePatterns;
};

// Función para verificar si un archivo o directorio debe ser ignorado
const shouldIgnore = (filePath) => {
    const relativePath = path.relative(rootDir, filePath).replace(/\\/g, '/');
    const ext = path.extname(filePath).toLowerCase();
    const baseName = path.basename(filePath);
    
    // Verificar si el archivo o directorio está en la lista de exclusión
    if (imageExtensions.includes(ext) || specificFilesToExclude.includes(baseName)) {
        return true;
    }

    // Verificar si el archivo o directorio está en los directorios a excluir
    for (const dir of directoriesToExclude) {
        if (relativePath.startsWith(dir)) {
            return true;
        }
    }

    // Verificar si el archivo o directorio coincide con algún patrón en .gitignore
    for (const pattern of ignorePatterns) {
        if (relativePath.includes(pattern)) {
            return true;
        }
    }

    return false;
};

// Función para recorrer directorios y registrar archivos
const readDirectory = (dir, fileList = []) => {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
        const filePath = path.join(dir, file);
        if (shouldIgnore(filePath)) {
            return;
        }
        const stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
            readDirectory(filePath, fileList);
        } else {
            fileList.push(filePath);
        }
    });
    return fileList;
};

// Lee los patrones de ignorar del archivo .gitignore
const ignorePatterns = readGitignore();

// Lee la estructura del directorio, excluyendo los patrones de .gitignore
const fileList = readDirectory(rootDir);

// Escribir la lista de archivos en el archivo de salida
const writeToFile = (fileList) => {
    const fileContent = fileList.map(file => {
        try {
            const relativePath = path.relative(rootDir, file);
            return `<!-- ${relativePath} -->\n${fs.readFileSync(file, 'utf-8')}\n`;
        } catch (err) {
            console.error(`Error reading file ${file}: ${err}`);
            return `<!-- ${relativePath} -->\nError reading file\n`;
        }
    }).join('\n');

    try {
        fs.writeFileSync(outputFile, fileContent, 'utf-8');
        console.log(`Archivo combinado creado en ${outputFile}`);
    } catch (err) {
        console.error(`Error writing to file ${outputFile}: ${err}`);
    }
};

writeToFile(fileList);


<!-- git -->
@echo off

REM Añadir todos los cambios
git add -A

REM Realizar commit con mensaje
git commit -m "Ajustar campos y agregar validaciones"

REM Forzar push a la rama main
git push origin main --force

<!-- git.bat -->
@echo off

REM Añadir todos los cambios
git add -A

REM Realizar commit con mensaje
git commit -m "Ajustar campos y agregar validaciones"

REM Forzar push a la rama main
git push origin main --force

<!-- package.json -->
{
  "name": "mars-mission",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node api/index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@supabase/supabase-js": "^2.43.5",
    "axios": "^0.21.4",
    "body-parser": "^1.20.2",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "ipinfo": "^1.5.1",
    "jsonwebtoken": "^9.0.2",
    "node-fetch": "^3.3.2",
    "openai": "^4.54.0",
    "pdf-parse": "^1.1.1",
    "pg": "^8.12.0"
  }
}


<!-- vercel.json -->
{
  "version": 2,
  "builds": [
    {
      "src": "api/index.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/index.js"
    }
  ]
}

